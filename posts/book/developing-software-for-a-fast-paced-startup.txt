- For whom is the book meant? Young people trying to build technology company
   - Much of the advice might seem obvious, but consider that someone in quora asked a question that
     implied codechef champ may rewrite google.

- This book talks about nuts and bolts of tech.
   o There is plenty of material related to how to ideate, and how to iterate.
   o Born mostly out of personal experience

- Be pragmatic
   o Sushank asked: what if this question comes in exam? [DONE]
   o You should own your house, your house should not own you
   o Aim is to solve real world problems, not to adopt best practices or write great algorithms
   o If you are spending lot of time in learning tools which you can write easily for yourself, you are doing it wrong
   o Chanakya style
   o Some imperfection is okay. Long term quality is more important than resolving each short term quality issue.
   o Start with what you have, do what you know
   o Recognize your constraints. Know what you do not know (utf-8). Do well what you know.
   o Automation on demand: If something manual is beign done repeatedly, automate it. Eg. file deletion.

- Spend time in learning fundamentals not tools
   o Many people think that some other tool/framwork will solve their problem.
      - Frameworks advertise themselves in quite a rosy way. You need to know what they will be better
        than your existing method. Eg. vertica is better than mysql, but why should redshift be
        faster than vertica, when both are columnar?

- Don't solve ancillary hard problems, avoid them
   o Solving one hard problem: the one which your company is solving is good enough
   o You may come up with easily solvable ancillary problems, solve them
        - Like we did with qgprofiler
        - Some new products come up like this
   o But, mostly look for available solutions

- Be ready to rewrite

- Deduplication at all levels [DONE]
   o Concept of unity is in all sciences
       - Biologists have found evolution
       - Physicists unify all the forces
       - Single electron theory
       - Mathematicians find connetion between different branches of maths
       - CS guys also find unity and exploit in their code
   o Duplication is hard to locate
       - If you start from a zoomed in picture and then zoom out, you may not be
         able to make out the object
       - Similarly, when system evolves, it may be hard to get a good big picture
   o Convention: camelCase etc
         dropdown or drop_down

- You do not need Hadoop [DONE]
   Don't blindly copy big companies
      o Google needs map reduce does not mean you do
          Raj said: I am learning hadoop because we will have large amount of data
      o FB uses hiphop compile does not mean you should

- Testing
      o Write test cases
      o We don't do TDD
      o Test on production

- Monitoring
      o Correctness [DONE]
      o Performance
      o Logging, quite verbose, even if it imposes good overhead [DONE]
      o Need for internal dashboard. What is happenng currently. [DONE]
      o Monitoring as a first class citizen [DONE]
      o A program itself may send the mail

- Performance
  o Don't optimise prematurely
  o What was a luxury yesterday becomes a necessity today.
  o Monitor performance
  o Taking an average may not be good: 90% ile may be better.

- Look for harmony
      o Computers are harmonious, harmony is destroyed by unreasonable human expectations
      o Sometimes performance considerations destroy harmony 
         - Otherwise functional languages will be there everywhere
         - Maybe with quantum computer, where will be enough compute power and harmony everywhere

- Need a strong technology leader
   o Rewriting/Refactoring has a up front cost

- On softare architecture
  o Be lenient with errors from external paraties, but be very strict with errors from
  internal components. Crash your components if internal data is not in correct format.
  o Who should adjust: UI Or backend. The problem is disharmony of human thinking and some component
    needs to adjust
  

- View software as an evolving organism, not as an instrument. Then you will be God. 
  Even God's creations are not perfect. Structure, function and evolution are the axes
  to understand organisms. They are also axes to understand software.

- Problem solving
  o Amadahl's law
  o Assumption vs derivations

- Any if needs a justification:
   if changed:
      write to disk
   why not
   write to disk (unconditionally)

- Learn your tools
   - vim editor
   - linux command line
   - Do things in new way, in a style

- How does Cofounder/CTO work?
   - My context may different from yours (I am tech heavy, and relatively senior) [DONE]
   - Go as deep as your capabilities and time allow [DONE]
   - At least skim through the code [DONE]
   - Set culture of performance
   - Know what is happening where [DONE]
   - Team building, hiring challenges, practical affair. Everyone says: we hire the best. 
     But not everyone can hire the best. We need to get excellent product out of well meaning
     but practically not that bright set of people. Which is fine, because no one is perfect.
     If your company is solving mundane problems, it is totally fine. You would need top
     notch brains if you are working on cutting edge research, which 95% of the companies are not. [DONE]
   - Tech work is never done: keep improving the performance, stability, monitoring, deployment, processes.
   - People have different skill sets: some do crappy work fast, some do good work slow. Some 
     can explore technologies
   - Should you press the people to work hard? How much to press? [DONE]
   - Hiring
     o Hire only the best? [DONE]
     o How much does experience matter? [DONE]
     o What interview questions to ask? [DONE]
     o Don't overhire even if you get money. [DONE]
   - How should teams be organized

- Interpersonal skills
   - No news is bad news. If employee is complaining about systems and code, he is engaged. If he is
     silent, then he will leave soon.

- Loosely coupled systems
   - Systems should use a queue
   - Use td-agent
   - If one system goes down, others should not be impacted. Systems have their capacities. If weakest
     link breaks, other systems should not break.

- Attitude
   - There is a tendency to say "there is no way my software can be wrong". The problem though, is 
     always between the chair and the monitor. [DONE]
   - Do just enough in first iteration, need not be perfect, and keep the logging etc on to detect bugs [DONE]
   - Don't keep trying without any clue. Don't delay giving bad news. Keep everyone updated. Do a bad work
     now that ponder aimlessly and then do a bad work in a long time. [DONE]
   - Don't max out. Have continuous improvement. In one interview, some one said that there was nothing new to learn
     in android development. [DONE]
   - Learn from each mistake [DONE]
     o A bug was discovered: write test case
     o A problem went undetected: make proper charts
   - Don't bring ego in. It is for people who feel unsafe. Set the example by not bringing ego in.
   - Hypothesis/Assumption/Conclusion: Don't jump to conclusion soon. Even when you do, remember why you are doing so.
     Have a mental model, and be ready to revise it. It is like Physics where relativity superceded classical physics. [DONE]

- Interacting with clients [DONE]
   - Reply quickly. Keep udpated. [DONE]
   - Customer is always right [DONE]
   - Reply on the same medium, so that there is a record [DONE]

- Don't take shortcuts.
    We stored dropdown fields like:
    {'e1': [p1, p2, p3],
     'e2': [p4, p5, p6]      
    }
   We needed to have types, so we should do like this:
    {
       e1: {
          p1: t1, p2: t2, p3: t3
       }
       e2:
    }

    Sagar said that code modification wise it was simpler to have:
    {
      e1: [{p1: t1}, {p2: t2}, {p3: t3}]
    }

    But this is bad idea. This is how evolution works. But we can do better.

- https://projectm-online.com/investing/why-maintenance-means-more-to-peoples-lives-than-innovation/

- Monitoring:
   Best is if developer finds problem
   Else tech team
   Else business team
   Else the customer
   Else no one

- Note that customer does not care about software quality. So, while you should strive to have the
  best quality that you can have, don't stop because of that.
- Generalists keep you in matches, specialists win you matches.
- Engineers like it when you are innovating and use new tools
- If someone asks for some data, revise before you give it to them. It like revising before submitting score sheet in examinations. Bhuppi did not partial marks in MOS.
- Don't have an ostrich attitude. This is very tempting in face of difficulties. I once had a closet with cockroaches. I never opened it again.
- Importance of documentation
- Opinion on scrum/sprint etc.
- Types of startups on various dimensions: how much "tech" is it? VMware vs Amazon vs Your pet store
- On fruitful discussion
  - Some people just go round and round, they carry away the conversation to a different topic
- https://try.newrelic.com/rs/412-MZS-894/images/ArchitectingforScale_SponsoredExcerpt.pdf
